// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XblApp.Infrastructure.Contexts;

#nullable disable

namespace XblApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role-adminTeam",
                            Name = "adminTeam",
                            NormalizedName = "ADMINTEAM"
                        },
                        new
                        {
                            Id = "role-gamerTeam",
                            Name = "gamerTeam",
                            NormalizedName = "GAMERTEAM"
                        },
                        new
                        {
                            Id = "role-moderatorTeam",
                            Name = "moderatorTeam",
                            NormalizedName = "MODERATORTEAM"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Achievement", b =>
                {
                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Gamerscore")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsSecret")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("LockedDescription")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("AchievementId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Game", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalAchievements")
                        .HasColumnType("integer");

                    b.Property<int>("TotalGamerscore")
                        .HasColumnType("integer");

                    b.HasKey("GameId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Gamer", b =>
                {
                    b.Property<long>("GamerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Gamerscore")
                        .HasColumnType("integer");

                    b.Property<string>("Gamertag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("GamerId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Gamers");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.GamerAchievement", b =>
                {
                    b.Property<long>("GamerId")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<long>("AchievementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateUnlocked")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUnlocked")
                        .HasColumnType("boolean");

                    b.HasKey("GamerId", "GameId", "AchievementId");

                    b.HasIndex("GameId");

                    b.HasIndex("AchievementId", "GameId");

                    b.ToTable("GamerAchievements");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.GamerGame", b =>
                {
                    b.Property<long>("GamerId")
                        .HasColumnType("bigint");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("CurrentAchievements")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentGamerscore")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastTimePlayed")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GamerId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GamerGame");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxAuthToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("AuthenticationToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpiresIn")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .HasColumnType("text");

                    b.Property<string>("TokenType")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("XboxOAuthTokens");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxXauToken", b =>
                {
                    b.Property<string>("UhsId")
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueInstant")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NotAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserIdFK")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UhsId");

                    b.HasIndex("UserIdFK")
                        .IsUnique();

                    b.ToTable("XboxLiveTokens");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxXstsToken", b =>
                {
                    b.Property<string>("Xuid")
                        .HasColumnType("text");

                    b.Property<string>("AgeGroup")
                        .HasColumnType("text");

                    b.Property<string>("Gamertag")
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueInstant")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NotAfter")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Privileges")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UhsIdFK")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPrivileges")
                        .HasColumnType("text");

                    b.Property<string>("Userhash")
                        .HasColumnType("text");

                    b.HasKey("Xuid");

                    b.HasIndex("UhsIdFK")
                        .IsUnique();

                    b.ToTable("XboxUserTokens");
                });

            modelBuilder.Entity("XblApp.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XblApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XblApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XblApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XblApp.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Achievement", b =>
                {
                    b.HasOne("XblApp.Domain.Entities.Game", "GameLink")
                        .WithMany("AchievementLinks")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Gamer", b =>
                {
                    b.HasOne("XblApp.Infrastructure.Models.ApplicationUser", null)
                        .WithOne()
                        .HasForeignKey("XblApp.Domain.Entities.Gamer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XblApp.Domain.Entities.GamerAchievement", b =>
                {
                    b.HasOne("XblApp.Domain.Entities.Game", "GameLink")
                        .WithMany("GamerAchievementLinks")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("XblApp.Domain.Entities.Gamer", "GamerLink")
                        .WithMany("GamerAchievementLinks")
                        .HasForeignKey("GamerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XblApp.Domain.Entities.Achievement", "AchievementLink")
                        .WithMany("GamerAchievementLinks")
                        .HasForeignKey("AchievementId", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementLink");

                    b.Navigation("GameLink");

                    b.Navigation("GamerLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.GamerGame", b =>
                {
                    b.HasOne("XblApp.Domain.Entities.Game", "GameLink")
                        .WithMany("GamerGameLinks")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XblApp.Domain.Entities.Gamer", "GamerLink")
                        .WithMany("GamerGameLinks")
                        .HasForeignKey("GamerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameLink");

                    b.Navigation("GamerLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxXauToken", b =>
                {
                    b.HasOne("XblApp.Domain.Entities.XblAuth.XboxAuthToken", "XboxOAuthTokenLink")
                        .WithOne("XboxXauTokenLink")
                        .HasForeignKey("XblApp.Domain.Entities.XblAuth.XboxXauToken", "UserIdFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("XboxOAuthTokenLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxXstsToken", b =>
                {
                    b.HasOne("XblApp.Domain.Entities.XblAuth.XboxXauToken", "XboxXauTokenLink")
                        .WithOne("XboxXstsTokenLink")
                        .HasForeignKey("XblApp.Domain.Entities.XblAuth.XboxXstsToken", "UhsIdFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("XboxXauTokenLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Achievement", b =>
                {
                    b.Navigation("GamerAchievementLinks");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Game", b =>
                {
                    b.Navigation("AchievementLinks");

                    b.Navigation("GamerAchievementLinks");

                    b.Navigation("GamerGameLinks");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.Gamer", b =>
                {
                    b.Navigation("GamerAchievementLinks");

                    b.Navigation("GamerGameLinks");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxAuthToken", b =>
                {
                    b.Navigation("XboxXauTokenLink");
                });

            modelBuilder.Entity("XblApp.Domain.Entities.XblAuth.XboxXauToken", b =>
                {
                    b.Navigation("XboxXstsTokenLink");
                });
#pragma warning restore 612, 618
        }
    }
}
